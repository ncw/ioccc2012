Build
=====

cc -Wall -O2 prog.c -o prog

Remarks
=======

This should compile on any C99 compiler eg gcc.

It runs a lot quicker on 64 bit systems!

I have successfully compiled and run this program without changes or
compiler warnings for 32 and 64 bit linux using gcc, Windows using
[MINGW](http://www.mingw.org/) and OS X 10.7 using Apple's default
(gcc based) compiler.

If you don't have a C99 compiler (hello it is 2012 Microsoft!) then:

  * comment out the #include <inttypes.h>
  * change the #define for uint32_t and uint64_t to be an unsigned 32
    and 64 bit type "unsigned int" and "unsigned long long" maybe.
  * find a replacement for PRIX64 to printf the unsigned 64 bit type
    ("lX" or "llX")

Hints
=====

You stare at the source code... Is that a picture of a
[monk](http://en.wikipedia.org/wiki/Marin_Mersenne)?  What does that
strange mathematical writing say?  You get a subliminal message...
Hunt for primes? But how?

You run the program.  It comes up with a strange usage message. What
could "p" be.  You try running the program with a prime number as an
argument.

  ./prog 23209

It returns after a few seconds with the rather cryptic message

  0x0000000000000000

What could that mean?  Maybe that 2^23209-1 is prime after all?

...

OK If you haven't guessed by now, this program proves the primality of
Mersenne primes of the form 2^p - 1.  The biggest known primes are of
this form because there is an efficient test for primality - the
(Lucas Lehmer test)[http://mathworld.wolfram.com/Lucas-LehmerTest.html].

If you run the program and it produces 0x0000000000000000 (0 in hex)
as an answer then you've found a prime of the form 2^p-1.  If it
produces anything else then 2^p-1 isn't prime.  The printed result is
the bottom 64 bits of the last iteration of the Lucas Lehmer test.

Have a look at the source code and see if you can work out how it
implements the Lucas Lehmer test...

Your first clue is to work out what the magic number -(U)(H)-1 is.

Got it?  It is a prime just less than 2^64, 2^64-2^32+1 (p from now
on), with some rather special properties.

The most important of which is that arithmetic modulo p can all be
done without using divisions or modulo operations (which are really
slow).  See if you can spot the add, subtract and multiplication
routines.  There are also reciprocal and to the power operations in
there somewhere.

The next important property is that p-1 has the following factors 2^32
* 3 * 5 * 17 * 257 * 65537.  All those factors of 2 suggest that we can
do a (Fast Fourier Transform)[http://mathworld.wolfram.com/FastFourierTransform.html]
over the (Galois Field)[http://mathworld.wolfram.com/FiniteField.html]
GF(p) which is arithmetic modulo p.  See if you can spot the FFT code
in there somewhere!

To make a truly efficient Mersenne primality prover it is necessary to
implement the
(IBDWT)[http://en.wikipedia.org/wiki/Irrational_base_discrete_weighted_transform]
a variant of the FFT using an irrational base.  You might wonder how
you can use an irrational base in a discrete field where every element
is an integer, but as it happens the p chosen has n-th roots of 2
where n is up to 26, which means that an IBDWT can be defined for FFT
sizes up to 2^26.

You'll find the code to generate the roots of 1 and 2 necessary for
the IBDWT if you search for 7 in the code.  7 is a primitive root of
GF(p) so all follows from that!

This all integer IBDWT isn't susceptible to the round off errors that
plague the floating point implementation, but does suffer in the speed
stakes from the fact that modern CPUs have much faster floating point
units that integer units.

For example to check if 2^18000000-1 is prime (a 5,418,539 digit
number) (prime95)[http://www.mersenne.org/freesoft/] (the current
speed demon) uses a 2^20 FFT size and each iteration takes it about
25ms. On similar hardware it this program takes about 1.2s also using
an FFT size of 2^20!  Prime95 is written in optimised assembler to use
SSE3 whereas this program was squeezed into 2k of portable C with a
completely unoptimised FFT!

This program can do an FFT of up to 2^26 entries.  Each entry can have up to
18 bits in (as 2*18+26 <= 63), which means that the biggest exponent
that it can test for primality is 18*(2^26)-1 = 1,207,959,551.  This
would be number of 363 million decimal digits so could be used to find
a 100 million digit prime and scoop the (EFF $150,000 prize)[https://www.eff.org/awards/coop]!
It would take rather a long time though...

The second argument to the program allows the number of iterations to
be put in, and using this it has been validated against the Prime95
test suite.  There is a unit test for the program but I thought
including it was probably against the spirit of the contest!

Speed could be improved greatly, but unfortunately there wasn't space
in the margin to do so ;-)
